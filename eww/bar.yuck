(deflisten workspaces :initial "(box :class \"workspaces\" :orientation \"horizontal\" :spacing 8 :space-evenly \"false\" (button :onclick \"hyprctl dispatch workspace 1\" :class \"button\") (button :onclick \"hyprctl dispatch workspace 2\" :class \"button\") (button :onclick \"hyprctl dispatch workspace 3\" :class \"button\") (button :onclick \"hyprctl dispatch workspace 4\" :class \"button\") (button :onclick \"hyprctl dispatch workspace 5\" :class \"button\") (button :onclick \"hyprctl dispatch workspace 6\" :class \"button\") (button :onclick \"hyprctl dispatch workspace 7\" :class \"button\") (button :onclick \"hyprctl dispatch workspace 8\" :class \"button\") (button :onclick \"hyprctl dispatch workspace 9\" :class \"button\") (button :onclick \"hyprctl dispatch workspace 10\" :class \"button\"))" "scripts/workspaces.sh")

(defwidget workspaces[]
    (literal :content workspaces)
)

(defpoll time :interval "1s"
         `date +"%H:%m • %a, %b %d"`
)

(defwidget clock[]
    (box :class "clock"
         :orientation "horizontal"

         time
    )
)

(deflisten hehe :initial ""
    "playerctl --follow metadata --format '{{ artist }} • {{ title }}' || true"
)

(defwidget music[]
    (box :class "music"
         :orientation "horizontal"

         (label
            :text {hehe != "" ? "${hehe}" : ""}
            :show-truncated true
            :limit-width 60
         )
    )
)

(defwidget cpu[]
    (box :class "cpu"
         :orientation "horizontal"

         (circular-progress
             :value {EWW_CPU.avg}
             :thickness 10
             :start-at 75
         )
    )
)

(defwidget ram[]
    (box :class "ram"
         :orientation "horizontal"

         (circular-progress
             :value {EWW_RAM.used_mem * 100 / EWW_RAM.total_mem}
             :thickness 10
             :start-at 75
         )
    )
)

(defwidget battery[]
    (box :class "batter"
         :orientation "horizontal"

         (circular-progress
             :value {EWW_BATTERY.BAT0.capacity}
             :thickness 10
             :start-at 75
         )
    )
)

(defwidget left []
    (box :class "modules-left"
         :orientation "horizontal"
         :halign "start"

         (workspaces)
    )
)

(defwidget center []
    (box :class "modules-center"
         :orientation "horizontal"
         :halign "center"
         :space-evenly false
         :spacing 40

         (clock)
         (music)
    )
)

(defwidget right []
    (box :class "modules-right"
         :orientation "horizontal"
         :halign "end"
         :spacing 10

         (cpu)
         (ram)
    )
)

(defwidget bar []
    (centerbox :class "bar"
               :orientation "h"

               (left)
               (center)
               (right)
    )
)

(defwindow example
        :monitor 0
        :geometry (geometry :x "0px"
                            :y "0px"
                            :width "100%"
                            :height "44px"
                            :anchor "top center"
                    )
        :stacking "fg"
        :exclusive true
        :focusable false
        :namespace "example"

    (bar)
)