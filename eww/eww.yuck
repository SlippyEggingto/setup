(deflisten workspaces :initial "(box :class \"workspaces\" :orientation \"horizontal\" :spacing 8 :space-evenly \"false\" (button :onclick \"hyprctl dispatch workspace 1\" :class \"button\") (button :onclick \"hyprctl dispatch workspace 2\" :class \"button\") (button :onclick \"hyprctl dispatch workspace 3\" :class \"button\") (button :onclick \"hyprctl dispatch workspace 4\" :class \"button\") (button :onclick \"hyprctl dispatch workspace 5\" :class \"button\") (button :onclick \"hyprctl dispatch workspace 6\" :class \"button\") (button :onclick \"hyprctl dispatch workspace 7\" :class \"button\") (button :onclick \"hyprctl dispatch workspace 8\" :class \"button\") (button :onclick \"hyprctl dispatch workspace 9\" :class \"button\") (button :onclick \"hyprctl dispatch workspace 10\" :class \"button\"))" "scripts/workspaces.sh")

(defwidget workspaces[]
    (literal :content workspaces)
)

(defpoll time :interval "1s"
         `date +"%H:%m • %a, %b %d"`
)

(defwidget clock[]
    (box :class "clock"
         :orientation "horizontal"

         time
    )
)

(deflisten hehe :initial ""
    "playerctl --follow metadata --format '{{ artist }} • {{ title }}' || true"
)

(defwidget music[]
    (box :class "music"
         :orientation "horizontal"

         (label
            :text {hehe != "" ? "${hehe}" : ""}
            :show-truncated true
            :limit-width 60
         )
    )
)

(defwidget cpu[]
    (box :class "cpu"
         :orientation "horizontal"

         (circular-progress
             :value {EWW_CPU.avg}
             :thickness 10
             :start-at 75
         )
    )
)

(defwidget ram[]
    (box :class "ram"
         :orientation "horizontal"

         (circular-progress
             :value {EWW_RAM.used_mem * 100 / EWW_RAM.total_mem}
             :thickness 10
             :start-at 75
         )
    )
)

(defwidget battery[]
    (box :class "batter"
         :orientation "horizontal"

         (circular-progress
             :value {EWW_BATTERY.BAT0.capacity}
             :thickness 10
             :start-at 75
         )
    )
)

(defwidget left []
    (box :class "modules-left"
         :orientation "horizontal"
         :halign "start"

         (workspaces)
    )
)

(defwidget center []
    (box :class "modules-center"
         :orientation "horizontal"
         :halign "center"
         :space-evenly false
         :spacing 40

         (clock)
         (music)
    )
)

(defwidget right []
    (box :class "modules-right"
         :orientation "horizontal"
         :halign "end"
         :spacing 10

         (cpu)
         (ram)
    )
)

(defwidget bar []
    (centerbox :class "bar"
               :orientation "h"

               (left)
               (center)
               (right)
    )
)

(defwindow example
        :monitor 0
        :geometry (geometry :x "0px"
                            :y "0px"
                            :width "100%"
                            :height "44px"
                            :anchor "top center"
                    )
        :stacking "fg"
        :exclusive "true"
        :focusable "false"
        :namespace "example"

    (bar)
)

(defwidget cpuWidget[]
    (box :class "cpu-widget"
         :orientation "vertical"

         (circular-progress
             :value {EWW_CPU.avg}
             :thickness 10
             :start-at 75
            
             {round(EWW_CPU.avg, 0)}
         )
    )
)

(defwidget ramWidget[]
    (box :class "ram-widget"

         (circular-progress
             :value {EWW_RAM.used_mem * 100 / EWW_RAM.total_mem}
             :thickness 10
             :start-at 75

             {round(EWW_RAM.used_mem * 100 / EWW_RAM.total_mem, 0)}
         )
    )
)

(defwidget swapWidget []
    (box :class "swap-widget"

         (circular-progress
             :value {(EWW_RAM.total_swap - EWW_RAM.free_swap) * 100 / EWW_RAM.total_swap}
             :thickness 10
             :start-at 75

             {round((EWW_RAM.total_swap - EWW_RAM.free_swap) * 100 / EWW_RAM.total_swap, 0)}
         )
    )
)

(defwidget widgetContainer []
    (box :class "widget-container"
         :orientation "horizontal"
         :spacing 20

         (cpuWidget)
         (ramWidget)
         (swapWidget)
    )
)

(defwidget cpuLabel []
    (box :class "cpu-label"
         "CPU usage"
    )
)

(defwidget ramLabel []
    (box :class "ram-label"
         "RAM usage"
    )
)

(defwidget swapLabel []
    (box :class "swap-label"
         "SWAP usage"
    )
)

(defwidget widgetLabel []
    (box :class "widget-label"
         :orientation "horizontal"

         (cpuLabel)
         (ramLabel)
         (swapLabel)
    )
)

(defwidget widgetBox[]
    (box :class "widget-box"
         :orientation "vertical"

         (widgetContainer)
         (widgetLabel)
    )
)

(defwindow widgetWindow
        :monitor 0
        :geometry (geometry :x "10px"
                            :y "10px"
                            :width "340px"
                            :height "200px"
                            :anchor "top right"
                  )
        
        :stacking "bottom"
        :exclusive false
        :focusable false
        :namespace "widgetWindow"

    (widgetBox)
)

(defwidget logoutImage []
    (image :path "/home/nptanphuc/setup/eww/icons/icon_3.jpg"
           :class "logout-image"
           :image-width 350
           :image-height 350
    )
)

(defwidget logoutButtons []
    (box :orientation "vertical"
         :class "logout-buttons"
         :height 350
         :spacing 10

         (button :class "poweroff"
                 :onclick "poweroff"
                 :width 350

                 (label :class "button-label"
                        :text "‎     Poweroff"
                        :halign "start"
                 )
         )

         (button :class "reboot"
                 :onclick "reboot"
                 :width 350

                 (label :class "button-label"
                        :text "‎     Reboot"
                        :halign "start"
                 )
         )

         (button :class "suspend"
                 :onclick "systemctl suspend"
                 :width 350

                 (label :class "button-label"
                        :text "‎     Suspend"
                        :halign "start"
                 )
         )

         (button :class "hibernate"
                 :onclick "systemctl hibernate"
                 :width 350

                 (label :class "button-label"
                        :text "‎     Hibernate"
                        :halign "start"
                 )
         )

         (button :class "lock"
                 :onclick "firefox https://github.com/hyprwm/Hyprland/issues/5816"
                 :timeout 500
                 :width 350

                 (label :class "button-label"
                        :text "‎     Lock ('should be fixed.')"
                        :halign "start"
                 )
         )

         (button :class "uwu"
                 :onclick "notify-send '(> ω <)'"
                 :width 350

                 (label :class "button-label"
                        :text "(> ω <) Click here!"
                        :halign "start"
                 )
         )
    )
)

(defwidget logout []
    (box :class "logout"
         :orientation "horizontal"
         :space-evenly false
         :spacing 25

         (logoutImage)
         (logoutButtons)
    )
)

(defwindow logoutWindow
        :monitor 0
        :geometry (geometry :x "0"
                            :y "0"
                            :width "725px"
                            :height "400px"
                            :anchor "center"
                  )

        :stacking "fg"

    (logout)
)