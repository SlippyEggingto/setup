(deflisten activeWorkspace "script/workspaces.sh")

(defwidget workspaces[]
    (literal :content activeWorkspace)
)

; (defwidget workspaces []
;     (box :class "workspaces"
;          :orientation "horizontal"
;          :spacing 10 :space-evenly "true"
         
;          (button :onclick "hyprctl dispatch workspace 1" :class "$one_class")
;          (button :onclick "hyprctl dispatch workspace 2" :class "$two_class")
;          (button :onclick "hyprctl dispatch workspace 3" :class "$three_class")
;          (button :onclick "hyprctl dispatch workspace 4" :class "$four_class")
;          (button :onclick "hyprctl dispatch workspace 5" :class "$five_class")
;          (button :onclick "hyprctl dispatch workspace 6" :class "$six_class")
;          (button :onclick "hyprctl dispatch workspace 7" :class "$seven_class")
;          (button :onclick "hyprctl dispatch workspace 8" :class "$eight_class")
;          (button :onclick "hyprctl dispatch workspace 9" :class "$nine_class")
;          (button :onclick "hyprctl dispatch workspace 10" :class "$ten_class")
;     )
; )

(defpoll time :interval "1s"
         `date +"%H:%m â€¢ %a, %b %d"`
)

(defwidget clock[]
    (box :class "clock hehe"
         :orientation "horizontal"

         time
    )
)

(deflisten hehe :initial ""
    "playerctl --follow metadata --format '{{ artist }} - {{ title }}' || true"
)

(defwidget music[]
    (box :class "music"
         :orientation "horizontal"

         {hehe != "" ? "${hehe}" : ""}
    )
)

(deflisten cpuUsage "script/cpu.sh")

(defwidget cpu[]
    (literal :content cpuUsage)
)

(defwidget ram[]
    (box :class "ram"
         :orientation "horizontal"

         (circular-progress
             :value {EWW_RAM.used_mem * 100 / EWW_RAM.total_mem}
             :thickness 10
             :start-at 75
         )
    )
)

(defwidget battery[]
    (box :class "batter"
         :orientation "horizontal"

         (circular-progress
             :value {EWW_BATTERY.BAT0.capacity}
             :thickness 10
             :start-at 75
         )
    )
)

(defwidget left []
    (box :class "modules-left"
         :orientation "horizontal"
         :halign "start"

         (workspaces)
    )
)

(defwidget center []
    (box :class "modules-center"
         :orientation "horizontal"
         :halign "center"

         (clock)
    )
)

(defwidget right []
    (box :class "modules-right"
         :orientation "horizontal"
         :halign "end"
         :spacing "10"

         (cpu)
         (ram)
    )
)

(defwidget bar []
    (centerbox :class "bar"
               :orientation "h"

               (left)
               (center)
               (right)
    )
)

(defwindow example
        :monitor 0
        :geometry (geometry :x "0px"
                            :y "0px"
                            :width "100%"
                            :height "44px"
                            :anchor "top center"
                    )
        :stacking "fg"
        :exclusive "true"
        :focusable "false"
        :namespace "example"

    (bar)
)